%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.67.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 767 181
%%HiResBoundingBox: 0 0 766.998 181
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 766.998 181 re
W
q
[1 0 0 1 -0.433 -0.102] cm
q
[1.00113 0 0 1.00113 0 0] cm
[1 0 0 1 766.998 0] cm
q
[0 1 -1 0 0 0] cm
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
0 0 181 767 re
W
q
[1 0 0 1 -194 -64] cm
q
[1 0 0 1 0 0] cm
0 0 595 842 re
W
q
171.880005 50 m
422.26001 50 l
422.26001 830.659973 l
171.880005 830.659973 l
W
/DeviceRGB {} CS
[0 0 0] SC
/DeviceRGB {} cs
[0 0 0] sc
1.08 w
1 j
1 J
310.480011 684.320007 m
310.480011 684.320007 l
S
307.23999 578.659973 m
307.23999 578.659973 l
S
268.720001 680.900024 m
268.720001 674.599976 l
270.700012 672.440002 l
279.160004 672.440002 l
281.320007 674.599976 l
281.320007 680.900024 l
S
281.320007 678.73999 m
268.720001 678.73999 l
S
270.700012 661.099976 m
268.720001 663.26001 l
268.720001 667.400024 l
270.700012 669.559998 l
279.160004 669.559998 l
281.320007 667.400024 l
281.320007 663.26001 l
279.160004 661.099976 l
S
279.160004 658.219971 m
281.320007 656.23999 l
268.720001 656.23999 l
S
268.720001 658.219971 m
268.720001 654.080017 l
S
0.9 w
310.480011 684.320007 m
326.140015 684.320007 l
326.140015 651.919983 l
S
1.08 w
326.140015 651.919983 m
294.640015 651.919983 l
S
0.9 w
294.640015 651.919983 m
294.640015 684.320007 l
310.480011 684.320007 l
S
1.08 w
310.480011 579.559998 m
313.540009 579.559998 l
S
0.9 w
313.540009 579.559998 m
313.540009 572 l
307.23999 572 l
307.23999 579.559998 l
310.480011 579.559998 l
S
1.08 w
290.320007 787.820007 m
288.339996 785.840027 l
288.339996 781.52002 l
290.320007 779.539978 l
298.779999 787.820007 l
300.940002 785.840027 l
300.940002 781.52002 l
298.779999 779.539978 l
S
298.779999 776.659973 m
300.940002 774.5 l
288.339996 774.5 l
S
288.339996 776.659973 m
288.339996 772.340027 l
S
310.480011 781.700012 m
310.480011 780.97998 l
313 780.97998 l
313 781.700012 l
307.959991 781.700012 l
307.959991 780.97998 l
310.480011 780.97998 l
S
0.72 w
313 781.340027 m
307.959991 781.340027 l
S
1.08 w
310.480011 699.799988 m
310.480011 699.26001 l
313 699.26001 l
313 699.799988 l
307.959991 699.799988 l
307.959991 699.26001 l
310.480011 699.26001 l
S
0.72 w
313 699.619995 m
307.959991 699.619995 l
S
1.08 w
290.859985 708.619995 m
288.700012 706.460022 l
288.700012 702.320007 l
290.859985 700.159973 l
299.140015 708.619995 l
301.299988 706.460022 l
301.299988 702.320007 l
299.140015 700.159973 l
S
299.140015 697.280029 m
301.299988 695.119995 l
301.299988 690.97998 l
299.140015 688.820007 l
296.980011 688.820007 l
295 690.97998 l
295 695.119995 l
292.839996 697.280029 l
288.700012 697.280029 l
288.700012 688.820007 l
S
0.9 w
250 159.979996 m
268.179993 154.580002 l
258.820007 122.360001 l
222.639999 132.800003 l
231.820007 165.199997 l
250 159.979996 l
S
239.020004 122 m
257.200012 116.599998 l
251.619995 97.160004 l
215.259995 107.599998 l
220.839996 127.220001 l
239.020004 122 l
S
294.640015 609.97998 m
294.640015 590.719971 l
310.480011 590.719971 l
326.140015 590.719971 l
326.140015 609.97998 l
310.480011 609.97998 l
294.640015 609.97998 l
S
0.72 w
310.480011 579.559998 m
310.480011 572 l
S
313.540009 575.780029 m
307.23999 575.780029 l
S
1.08 w
269.799988 616.099976 m
269.799988 609.799988 l
271.779999 607.640015 l
280.23999 607.640015 l
282.220001 609.799988 l
282.220001 616.099976 l
S
282.220001 613.940002 m
269.799988 613.940002 l
S
271.779999 596.299988 m
269.799988 598.460022 l
269.799988 602.599976 l
271.779999 604.76001 l
280.23999 604.76001 l
282.220001 602.599976 l
282.220001 598.460022 l
280.23999 596.299988 l
S
280.23999 593.419983 m
282.220001 591.26001 l
282.220001 587.119995 l
280.23999 584.960022 l
278.079987 584.960022 l
276.100006 587.119995 l
276.100006 591.26001 l
273.940002 593.419983 l
269.799988 593.419983 l
269.799988 584.960022 l
S
214 180.860001 m
212.559998 174.740005 l
214.179993 172.220001 l
222.279999 170.240005 l
224.800003 171.860001 l
226.240005 177.979996 l
S
225.699997 176 m
213.460007 178.880005 l
S
211.479996 161.240005 m
210.039993 163.759995 l
210.940002 167.720001 l
213.460007 169.339996 l
221.559998 167.539993 l
223.179993 165.020004 l
222.279999 160.880005 l
219.759995 159.259995 l
S
219.039993 156.380005 m
220.660004 153.860001 l
219.580002 149.899994 l
217.059998 148.279999 l
215.080002 148.639999 l
213.460007 151.160004 l
214 153.320007 l
S
213.460007 151.160004 m
210.940002 149.720001 l
208.960007 150.080002 l
207.339996 152.600006 l
208.419998 156.740005 l
210.940002 158.360001 l
S
202.119995 140.720001 m
200.679993 134.600006 l
202.119995 132.080002 l
210.399994 130.100006 l
212.919998 131.720001 l
214.360001 137.839996 l
S
213.820007 135.860001 m
201.580002 138.740005 l
S
199.600006 121.099998 m
197.979996 123.620003 l
199.059998 127.580002 l
201.580002 129.199997 l
209.679993 127.220001 l
211.300003 124.699997 l
210.220001 120.739998 l
207.699997 119.120003 l
S
199.059998 109.580002 m
201.039993 117.68 l
207.699997 109.580002 l
195.460007 112.459999 l
S
301.299988 565.880005 m
301.299988 557.419983 l
S
301.299988 561.73999 m
288.700012 561.73999 l
S
2.88 w
373.299988 464.359985 m
359.440002 464.359985 l
S
336.940002 464.359985 m
321.820007 464.359985 l
S
299.140015 464.359985 m
284.019989 464.359985 l
S
261.339996 464.359985 m
247.479996 464.359985 l
S
373.299988 464.359985 m
373.299988 456.799988 l
S
373.299988 434.119995 m
373.299988 419 l
S
373.299988 396.320007 m
373.299988 381.200012 l
S
373.299988 358.519989 m
373.299988 343.399994 l
S
373.299988 320.720001 m
373.299988 305.600006 l
S
373.299988 283.100006 m
373.299988 275.540009 l
S
247.479996 464.359985 m
247.479996 456.799988 l
S
247.479996 434.119995 m
247.479996 419 l
S
247.479996 396.320007 m
247.479996 381.200012 l
S
247.479996 358.519989 m
247.479996 343.399994 l
S
247.479996 320.720001 m
247.479996 305.600006 l
S
247.479996 283.100006 m
247.479996 275.540009 l
S
373.299988 275.540009 m
359.440002 275.540009 l
S
336.940002 275.540009 m
321.820007 275.540009 l
S
299.140015 275.540009 m
284.019989 275.540009 l
S
261.339996 275.540009 m
247.479996 275.540009 l
S
0.72 w
310.480011 830.47998 m
310.480011 572 l
S
2.88 w
264.579987 378.140015 m
277.179993 378.140015 l
268.899994 374 l
277.179993 369.679993 l
264.579987 369.679993 l
S
0.72 w
205.179993 479.839996 m
209.679993 479.839996 l
209.679993 605.840027 l
205.179993 605.840027 l
S
209.679993 605.840027 m
214 605.840027 l
S
209.679993 479.839996 m
214 479.839996 l
S
1.08 w
228.399994 550.039978 m
230.380005 547.880005 l
217.960007 547.880005 l
S
217.960007 550.039978 m
217.960007 545.719971 l
S
217.960007 542.47998 m
226.240005 542.47998 l
S
224.259995 542.47998 m
226.240005 540.320007 l
224.259995 538.340027 l
222.100006 538.340027 l
S
224.259995 538.340027 m
226.240005 536.179993 l
224.259995 534.02002 l
217.960007 534.02002 l
S
0.72 w
238.839996 64.760002 m
312.279999 369.859985 l
310.480011 575.780029 l
308.140015 369.859985 l
211.839996 73.040001 l
S
Q
Q
Q
Q
Q
Q
[1 0 0 1 -766.998 0] cm
Q
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
